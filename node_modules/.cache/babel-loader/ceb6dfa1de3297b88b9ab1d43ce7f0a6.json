{"ast":null,"code":"import _regeneratorRuntime from \"/Users/proprietaire/Desktop/PWA-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/proprietaire/Desktop/PWA-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/proprietaire/Desktop/PWA-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/proprietaire/Desktop/PWA-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState, useReducer, useEffect } from 'react';\n\nfunction SuperFetch(_x) {\n  return _SuperFetch.apply(this, arguments);\n}\n\nfunction _SuperFetch() {\n  _SuperFetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, method = 'GET', headers = {\n    'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8'\n  }, body = {}) {\n    var options;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          options = {\n            method,\n            headers\n          };\n          if (method === 'POST' || method === 'PUT') options = _objectSpread({}, options, {\n            body\n          }); // authentication\n          // we will had custom headers here.\n\n          return _context2.abrupt(\"return\", fetch(url, options).then(res => {\n            return Promise.resolve(res.json());\n          }).catch(error => Promise.reject(error)));\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _SuperFetch.apply(this, arguments);\n}\n\nfunction dataFetchReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return _objectSpread({}, state, {\n        loading: true,\n        error: false\n      });\n\n    case 'FETCH_SUCCESS':\n      return _objectSpread({}, state, {\n        data: action.payload.slice(0, state.limit),\n        total: action.payload,\n        loading: false,\n        error: false\n      });\n\n    case 'FETCH_FAILURE':\n      return _objectSpread({}, state, {\n        loading: false,\n        error: true\n      });\n\n    case 'LOAD_MORE':\n      return _objectSpread({}, state, {\n        data: [...state.data, ...state.total.slice(state.data.length, state.data.length + state.limit)],\n        loading: false,\n        error: false\n      });\n\n    default:\n      throw new Error();\n  }\n}\n\nconst useDataApi = (initialUrl, limit = 10, initialData = []) => {\n  const _useState = useState(initialUrl),\n        _useState2 = _slicedToArray(_useState, 2),\n        url = _useState2[0],\n        setUrl = _useState2[1];\n\n  const _useReducer = useReducer(dataFetchReducer, {\n    loading: false,\n    error: false,\n    data: initialData,\n    total: initialData,\n    limit: limit\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: 'FETCH_INIT'\n              });\n              _context.prev = 1;\n              _context.next = 4;\n              return SuperFetch(url);\n\n            case 4:\n              result = _context.sent;\n\n              if (!didCancel) {\n                dispatch({\n                  type: 'FETCH_SUCCESS',\n                  payload: result\n                });\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n\n              if (!didCancel) {\n                dispatch({\n                  type: 'FETCH_FAILURE'\n                });\n              }\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 8]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  const loadMoreData = () => {\n    dispatch({\n      type: 'LOAD_MORE'\n    });\n  };\n\n  const doFetch = url => {\n    setUrl(url);\n  };\n\n  return _objectSpread({}, state, {\n    doFetch,\n    loadMoreData\n  });\n};\n\nexport default useDataApi;","map":{"version":3,"sources":["/Users/proprietaire/Desktop/PWA-master/src/library/hooks/useDataApi.js"],"names":["useState","useReducer","useEffect","SuperFetch","url","method","headers","body","options","fetch","then","res","Promise","resolve","json","catch","error","reject","dataFetchReducer","state","action","type","loading","data","payload","slice","limit","total","length","Error","useDataApi","initialUrl","initialData","setUrl","dispatch","didCancel","fetchData","result","loadMoreData","doFetch"],"mappings":"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","sourcesContent":["import { useState, useReducer, useEffect } from 'react';\n\nasync function SuperFetch(\n  url,\n  method = 'GET',\n  headers = {\n    'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8',\n  },\n  body = {}\n) {\n  let options = {\n    method,\n    headers,\n  };\n  if (method === 'POST' || method === 'PUT') options = { ...options, body };\n\n  // authentication\n  // we will had custom headers here.\n\n  return fetch(url, options)\n    .then(res => {\n      return Promise.resolve(res.json());\n    })\n    .catch(error => Promise.reject(error));\n}\n\nfunction dataFetchReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return {\n        ...state,\n        loading: true,\n        error: false,\n      };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        data: action.payload.slice(0, state.limit),\n        total: action.payload,\n        loading: false,\n        error: false,\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        error: true,\n      };\n    case 'LOAD_MORE':\n      return {\n        ...state,\n        data: [\n          ...state.data,\n          ...state.total.slice(\n            state.data.length,\n            state.data.length + state.limit\n          ),\n        ],\n        loading: false,\n        error: false,\n      };\n    default:\n      throw new Error();\n  }\n}\n\nconst useDataApi = (initialUrl, limit = 10, initialData = []) => {\n  const [url, setUrl] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    loading: false,\n    error: false,\n    data: initialData,\n    total: initialData,\n    limit: limit,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_INIT' });\n\n      try {\n        const result = await SuperFetch(url);\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_SUCCESS', payload: result });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_FAILURE' });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n  const loadMoreData = () => {\n    dispatch({ type: 'LOAD_MORE' });\n  };\n  const doFetch = url => {\n    setUrl(url);\n  };\n\n  return { ...state, doFetch, loadMoreData };\n};\n\nexport default useDataApi;\n"]},"metadata":{},"sourceType":"module"}