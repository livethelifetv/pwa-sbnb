{"ast":null,"code":"import _objectSpread from \"/Users/proprietaire/Desktop/PWA-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/proprietaire/Desktop/PWA-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/proprietaire/Desktop/PWA-master/src/components/Map/MapSearchBox.js\";\nimport React, { Fragment, useState, useRef } from 'react';\nimport _ from 'lodash';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from 'react-google-maps';\nimport { compose, withProps } from 'recompose';\nimport Input from 'components/UI/Antd/Input/Input';\nimport MakerImage from './hotelMapMarker.png';\n\nconst _require = require('react-google-maps/lib/components/places/SearchBox'),\n      SearchBox = _require.SearchBox;\n\nconst MapWithSearchBox = compose(withProps({\n  googleMapURL: process.env.REACT_APP_GOOGLE_MAP_API_KEY,\n  loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 21\n    }\n  }),\n  containerElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"400px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 23\n    }\n  }),\n  mapElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }\n  })\n}), withScriptjs, withGoogleMap)(props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        dragNDropData = _useState2[0],\n        setDragNDropData = _useState2[1];\n\n  const updatevalue = props.updatevalue;\n\n  const _useState3 = useState({\n    searchedLocation: ''\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        locationInput = _useState4[0],\n        setLocationInput = _useState4[1];\n\n  const _useState5 = useState({\n    center: {\n      lat: 40.7128,\n      lng: -74.006\n    },\n    markers: [{\n      position: {\n        lat: 40.7128,\n        lng: -74.006\n      }\n    }],\n    places: []\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        locationDetails = _useState6[0],\n        setLocationDetails = _useState6[1];\n\n  const googleMapRef = useRef(null);\n  const SearchBoxRef = useRef(null);\n\n  const onPlacesChanged = () => {\n    const places = SearchBoxRef.current.getPlaces();\n    const bounds = new window.google.maps.LatLngBounds();\n    places.forEach(place => {\n      if (place.geometry.viewport) {\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    const nextMarkers = places.map(place => ({\n      position: place.geometry.location\n    }));\n\n    const nextCenter = _.get(nextMarkers, '0.position', locationDetails.center);\n\n    setLocationDetails({\n      places,\n      center: nextCenter,\n      markers: nextMarkers\n    });\n    setLocationInput({\n      searchedLocation: places && places[0] && places[0].formatted_address\n    });\n    updatevalue(places);\n  };\n\n  const handleOnChange = event => {\n    event.stopPropagation();\n\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n  };\n\n  const handleOnPressEnter = event => {\n    event.stopPropagation();\n\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n  };\n\n  const onDragEndFunc = marker => {\n    let tempLocArray = [];\n    var geocoder = new window.google.maps.Geocoder();\n    const latlng = {\n      lat: Number(marker.latLng.lat().toFixed(4)),\n      lng: Number(marker.latLng.lng().toFixed(4))\n    };\n    setLocationDetails(_objectSpread({}, locationDetails, {\n      center: latlng\n    }));\n    geocoder.geocode({\n      latLng: latlng\n    }, function (results, status) {\n      console.log(results, 'results');\n\n      if (results[0] && results[0].formatted_address) {\n        setLocationInput({\n          searchedLocation: results[0] && results[0].formatted_address\n        });\n        const location = {\n          place_id: results[0].place_id,\n          formatted_address: results[0].formatted_address,\n          address_components: results[0].address_components,\n          geometry: results[0].geometry\n        };\n        tempLocArray.push(location);\n      }\n\n      setDragNDropData(tempLocArray);\n    });\n    updatevalue(dragNDropData);\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    ref: googleMapRef,\n    defaultZoom: 15,\n    center: locationDetails.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SearchBox, {\n    ref: SearchBoxRef,\n    controlPosition: window.google.maps.ControlPosition.TOP_LEFT,\n    onPlacesChanged: onPlacesChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    placeholder: \"Enter your hotel location\",\n    style: {\n      boxSizing: \"border-box\",\n      border: \"1px solid transparent\",\n      width: \"260px\",\n      height: \"40px\",\n      marginTop: \"10px\",\n      padding: \"0 12px\",\n      borderRadius: \"2px\",\n      boxShadow: \"0 3px 6px rgba(0, 0, 0, 0.16)\",\n      fontSize: \"15px\",\n      outline: \"none\",\n      textOverflow: \"ellipses\"\n    },\n    defaultValue: \"\",\n    value: locationInput ? locationInput.searchedLocation : '',\n    onChange: handleOnChange,\n    onPressEnter: handleOnPressEnter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  })), locationDetails.markers.map((marker, index) => {\n    return /*#__PURE__*/React.createElement(Marker, {\n      icon: MakerImage,\n      key: index,\n      position: marker.position // draggable\n      ,\n      onDragEnd: marker => onDragEndFunc(marker),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    });\n  })));\n});\nexport default MapWithSearchBox;","map":{"version":3,"sources":["/Users/proprietaire/Desktop/PWA-master/src/components/Map/MapSearchBox.js"],"names":["React","Fragment","useState","useRef","_","withScriptjs","withGoogleMap","GoogleMap","Marker","compose","withProps","Input","MakerImage","require","SearchBox","MapWithSearchBox","googleMapURL","process","env","REACT_APP_GOOGLE_MAP_API_KEY","loadingElement","height","containerElement","mapElement","props","dragNDropData","setDragNDropData","updatevalue","searchedLocation","locationInput","setLocationInput","center","lat","lng","markers","position","places","locationDetails","setLocationDetails","googleMapRef","SearchBoxRef","onPlacesChanged","current","getPlaces","bounds","window","google","maps","LatLngBounds","forEach","place","geometry","viewport","union","extend","location","nextMarkers","map","nextCenter","get","formatted_address","handleOnChange","event","stopPropagation","which","preventDefault","target","value","handleOnPressEnter","onDragEndFunc","marker","tempLocArray","geocoder","Geocoder","latlng","Number","latLng","toFixed","geocode","results","status","console","log","place_id","address_components","push","ControlPosition","TOP_LEFT","boxSizing","border","width","marginTop","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","index"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useRef } from 'react';\nimport _ from 'lodash';\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} from 'react-google-maps';\nimport { compose, withProps } from 'recompose';\nimport Input from 'components/UI/Antd/Input/Input';\nimport MakerImage from './hotelMapMarker.png';\nconst {\n  SearchBox,\n} = require('react-google-maps/lib/components/places/SearchBox');\n\nconst MapWithSearchBox = compose(\n  withProps({\n    googleMapURL: process.env.REACT_APP_GOOGLE_MAP_API_KEY,\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  withScriptjs,\n  withGoogleMap\n)(props => {\n  const [dragNDropData, setDragNDropData] = useState([]);\n  const { updatevalue } = props;\n  const [locationInput, setLocationInput] = useState({ searchedLocation: '' });\n  const [locationDetails, setLocationDetails] = useState({\n    center: {\n      lat: 40.7128,\n      lng: -74.006,\n    },\n    markers: [\n      {\n        position: {\n          lat: 40.7128,\n          lng: -74.006,\n        },\n      },\n    ],\n    places: [],\n  });\n  const googleMapRef = useRef(null);\n  const SearchBoxRef = useRef(null);\n  const onPlacesChanged = () => {\n    const places = SearchBoxRef.current.getPlaces();\n    const bounds = new window.google.maps.LatLngBounds();\n    places.forEach(place => {\n      if (place.geometry.viewport) {\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    const nextMarkers = places.map(place => ({\n      position: place.geometry.location,\n    }));\n    const nextCenter = _.get(nextMarkers, '0.position', locationDetails.center);\n\n    setLocationDetails({\n      places,\n      center: nextCenter,\n      markers: nextMarkers,\n    });\n    setLocationInput({\n      searchedLocation: places && places[0] && places[0].formatted_address,\n    });\n    updatevalue(places);\n  };\n\n  const handleOnChange = event => {\n    event.stopPropagation();\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n    setLocationInput({ searchedLocation: event.target.value });\n  };\n\n  const handleOnPressEnter = event => {\n    event.stopPropagation();\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n    setLocationInput({ searchedLocation: event.target.value });\n  };\n\n  const onDragEndFunc = marker => {\n    let tempLocArray = [];\n    var geocoder = new window.google.maps.Geocoder();\n    const latlng = {\n      lat: Number(marker.latLng.lat().toFixed(4)),\n      lng: Number(marker.latLng.lng().toFixed(4)),\n    };\n\n    setLocationDetails({\n      ...locationDetails,\n      center: latlng,\n    });\n\n    geocoder.geocode({ latLng: latlng }, function(results, status) {\n      console.log(results, 'results');\n      if (results[0] && results[0].formatted_address) {\n        setLocationInput({\n          searchedLocation: results[0] && results[0].formatted_address,\n        });\n        const location = {\n          place_id: results[0].place_id,\n          formatted_address: results[0].formatted_address,\n          address_components: results[0].address_components,\n          geometry: results[0].geometry,\n        };\n        tempLocArray.push(location);\n      }\n      setDragNDropData(tempLocArray);\n    });\n    updatevalue(dragNDropData);\n  };\n\n  return (\n    <Fragment>\n      <GoogleMap\n        ref={googleMapRef}\n        defaultZoom={15}\n        center={locationDetails.center}\n      >\n        <SearchBox\n          ref={SearchBoxRef}\n          controlPosition={window.google.maps.ControlPosition.TOP_LEFT}\n          onPlacesChanged={onPlacesChanged}\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"Enter your hotel location\"\n            style={{\n              boxSizing: `border-box`,\n              border: `1px solid transparent`,\n              width: `260px`,\n              height: `40px`,\n              marginTop: `10px`,\n              padding: `0 12px`,\n              borderRadius: `2px`,\n              boxShadow: `0 3px 6px rgba(0, 0, 0, 0.16)`,\n              fontSize: `15px`,\n              outline: `none`,\n              textOverflow: `ellipses`,\n            }}\n            defaultValue=\"\"\n            value={locationInput ? locationInput.searchedLocation : ''}\n            onChange={handleOnChange}\n            onPressEnter={handleOnPressEnter}\n          />\n        </SearchBox>\n        {locationDetails.markers.map((marker, index) => {\n          return (\n            <Marker\n              icon={MakerImage}\n              key={index}\n              position={marker.position}\n              // draggable\n              onDragEnd={marker => onDragEndFunc(marker)}\n            />\n          );\n        })}\n      </GoogleMap>\n    </Fragment>\n  );\n});\n\nexport default MapWithSearchBox;\n"]},"metadata":{},"sourceType":"module"}