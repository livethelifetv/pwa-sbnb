{"ast":null,"code":"import _slicedToArray from \"/Users/proprietaire/Desktop/PWA-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/proprietaire/Desktop/PWA-master/src/context/AuthProvider.js\";\nimport React, { useState } from 'react';\nimport Cookies from 'js-cookie';\nexport const AuthContext = React.createContext();\nconst fakeUserData = {\n  id: 1,\n  name: 'Jhon Doe',\n  avatar: '',\n  roles: ['USER', 'ADMIN']\n};\n/**\n * We have used Fake JWT token from \"jwt.io\"\n * This is a sample token to show auth is working\n * Your token will come from your server when user successfully loggedIn.\n */\n\nconst fakeToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEiLCJuYW1lIjoidGFyZXEgam9iYXllcmUiLCJyb2xlcyI6ImFkbWluIn0.k74_B-zeWket405dIAt018mnQFMh_6_BTFpjB77HtRQ';\n\nconst addItem = (key, value = '') => {\n  /**\n   *  Using the local storage code....\n   */\n  // if (key) localStorage.setItem(key, value);\n\n  /**\n   *  Using the Cookies code...\n   */\n  if (key) Cookies.set(key, value, {\n    expires: 7\n  });\n};\n\nconst clearItem = key => {\n  /**\n   *  Using the local storage code....\n   */\n  // localStorage.removeItem(key);\n\n  /**\n   *  Using the Cookies code...\n   */\n  Cookies.remove(key);\n};\n\nconst isValidToken = () => {\n  /**\n   *  Using the local storage code....\n   */\n  // const token = localStorage.getItem('token');\n\n  /**\n   *  Using the Cookies code...\n   */\n  const token = Cookies.get('token'); // JWT decode & check token validity & expiration.\n\n  if (token) return true;\n  return false;\n};\n\nconst AuthProvider = props => {\n  const _useState = useState(isValidToken()),\n        _useState2 = _slicedToArray(_useState, 2),\n        loggedIn = _useState2[0],\n        setLoggedIn = _useState2[1]; // const [loggedOut, setLoggedOut] = useState(true);\n\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        user = _useState4[0],\n        setUser = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        token = _useState6[0],\n        setToken = _useState6[1];\n\n  const signIn = params => {\n    /**\n     * Make post request here to authenticate with fetch\n     * if returns true then change the state\n     */\n    console.log(params, 'sign in form Props');\n    setUser(fakeUserData);\n    setToken(fakeToken);\n    addItem('token', fakeToken);\n    setLoggedIn(true);\n  };\n\n  const signUp = params => {\n    console.log(params, 'sign up form Props');\n    setUser(fakeUserData);\n    setToken(fakeToken);\n    addItem('token', fakeToken);\n    setLoggedIn(true);\n  };\n  /**\n   * For 3rd-party Authentication [e.g. Autho0, firebase, AWS etc]\n   *\n   */\n\n\n  const tokenAuth = (token, user = {}) => {\n    setUser(user);\n    setToken(token);\n    addItem('token', token);\n    setLoggedIn(true);\n  };\n\n  const forgetPass = params => {\n    console.log(params, 'forget password form Props');\n  };\n\n  const changePass = params => {\n    console.log(params, 'change password form Props');\n  };\n\n  const logOut = () => {\n    setUser(null);\n    setToken(null);\n    clearItem('token');\n    setLoggedIn(false);\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      loggedIn,\n      logOut,\n      signIn,\n      signUp,\n      forgetPass,\n      changePass,\n      tokenAuth,\n      user,\n      token\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, props.children));\n};\n\nexport default AuthProvider;","map":{"version":3,"sources":["/Users/proprietaire/Desktop/PWA-master/src/context/AuthProvider.js"],"names":["React","useState","Cookies","AuthContext","createContext","fakeUserData","id","name","avatar","roles","fakeToken","addItem","key","value","set","expires","clearItem","remove","isValidToken","token","get","AuthProvider","props","loggedIn","setLoggedIn","user","setUser","setToken","signIn","params","console","log","signUp","tokenAuth","forgetPass","changePass","logOut","children"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Cookies from 'js-cookie';\nexport const AuthContext = React.createContext();\n\nconst fakeUserData = {\n  id: 1,\n  name: 'Jhon Doe',\n  avatar: '',\n  roles: ['USER', 'ADMIN'],\n};\n\n/**\n * We have used Fake JWT token from \"jwt.io\"\n * This is a sample token to show auth is working\n * Your token will come from your server when user successfully loggedIn.\n */\n\nconst fakeToken =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEiLCJuYW1lIjoidGFyZXEgam9iYXllcmUiLCJyb2xlcyI6ImFkbWluIn0.k74_B-zeWket405dIAt018mnQFMh_6_BTFpjB77HtRQ';\n\nconst addItem = (key, value = '') => {\n  /**\n   *  Using the local storage code....\n   */\n  // if (key) localStorage.setItem(key, value);\n\n  /**\n   *  Using the Cookies code...\n   */\n  if (key) Cookies.set(key, value, { expires: 7 });\n};\n\nconst clearItem = key => {\n  /**\n   *  Using the local storage code....\n   */\n  // localStorage.removeItem(key);\n\n  /**\n   *  Using the Cookies code...\n   */\n  Cookies.remove(key);\n};\n\nconst isValidToken = () => {\n  /**\n   *  Using the local storage code....\n   */\n  // const token = localStorage.getItem('token');\n\n  /**\n   *  Using the Cookies code...\n   */\n  const token = Cookies.get('token');\n  // JWT decode & check token validity & expiration.\n  if (token) return true;\n  return false;\n};\n\nconst AuthProvider = props => {\n  const [loggedIn, setLoggedIn] = useState(isValidToken());\n  // const [loggedOut, setLoggedOut] = useState(true);\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n\n  const signIn = params => {\n    /**\n     * Make post request here to authenticate with fetch\n     * if returns true then change the state\n     */\n    console.log(params, 'sign in form Props');\n    setUser(fakeUserData);\n    setToken(fakeToken);\n    addItem('token', fakeToken);\n    setLoggedIn(true);\n  };\n  const signUp = params => {\n    console.log(params, 'sign up form Props');\n    setUser(fakeUserData);\n    setToken(fakeToken);\n    addItem('token', fakeToken);\n    setLoggedIn(true);\n  };\n\n  /**\n   * For 3rd-party Authentication [e.g. Autho0, firebase, AWS etc]\n   *\n   */\n  const tokenAuth = (token, user = {}) => {\n    setUser(user);\n    setToken(token);\n    addItem('token', token);\n    setLoggedIn(true);\n  };\n\n  const forgetPass = params => {\n    console.log(params, 'forget password form Props');\n  };\n  const changePass = params => {\n    console.log(params, 'change password form Props');\n  };\n\n  const logOut = () => {\n    setUser(null);\n    setToken(null);\n    clearItem('token');\n    setLoggedIn(false);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        loggedIn,\n        logOut,\n        signIn,\n        signUp,\n        forgetPass,\n        changePass,\n        tokenAuth,\n        user,\n        token,\n      }}\n    >\n      <>{props.children}</>\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n"]},"metadata":{},"sourceType":"module"}